/* Generated by AN DISI Unibo */ 
package it.unibo.wis

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Wis ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
				var distance=999
				var rp_number=0
				var robot=""
				var incinerator="off"
				var robot_sent=0
				var ash_available=0
				var DLIMIT=15
				var RP_remove = -50
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("$name		START")
						delay(500) 
						subscribeToLocalActor("incinerator") 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="ready", cond=doswitch() )
				}	 
				state("ready") { //this:State
					action { //it:State
						CommUtils.outgreen("$name		READY")
						updateResourceRep( "$name	INFO:	numero RP: $rp_number	distance: $distance	incinerator: $incinerator	robot: $robot	ash: $ash_available"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t136",targetState="handle_activation",cond=whenDispatch("activation_command"))
					transition(edgeName="t137",targetState="handle_sonar",cond=whenDispatch("sonar_value"))
					transition(edgeName="t138",targetState="handle_rp_number",cond=whenDispatch("rp_number"))
					transition(edgeName="t139",targetState="handle_robot_init",cond=whenDispatch("work"))
					transition(edgeName="t140",targetState="handle_map",cond=whenDispatch("map"))
				}	 
				state("handle_sonar") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("sonar_value(K)"), Term.createTerm("sonar_value(K)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 distance=payloadArg(0).toInt()  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="ready", cond=doswitchGuarded({ incinerator=="off"  
					}) )
					transition( edgeName="goto",targetState="activated", cond=doswitchGuarded({! ( incinerator=="off"  
					) }) )
				}	 
				state("handle_rp_number") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("rp_number(N)"), Term.createTerm("rp_number(K)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 rp_number=payloadArg(0).toInt()  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="ready", cond=doswitchGuarded({ incinerator=="off"  
					}) )
					transition( edgeName="goto",targetState="activated", cond=doswitchGuarded({! ( incinerator=="off"  
					) }) )
				}	 
				state("handle_robot_init") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("work(X)"), Term.createTerm("work(K)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 robot=payloadArg(0)  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="ready", cond=doswitchGuarded({ incinerator=="off"  
					}) )
					transition( edgeName="goto",targetState="activated", cond=doswitchGuarded({! ( incinerator=="off"  
					) }) )
				}	 
				state("handle_activation") { //this:State
					action { //it:State
						 incinerator="on"  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="activated", cond=doswitch() )
				}	 
				state("activated") { //this:State
					action { //it:State
						updateResourceRep( "$name	INFO:	numero RP: $rp_number	distance: $distance	incinerator: $incinerator	robot: $robot	ash: $ash_available"  
						)
						CommUtils.outgreen("$name	INFO:	rp_number: $rp_number	distance: $distance	incinerator: $incinerator		robot: $robot	ash: $ash_available")
						if(  rp_number>0 && distance>DLIMIT && incinerator!="burning" && (robot=="waiting_home" || robot=="job_done") && robot_sent==0 && ash_available==0  
						 ){forward("take_RP", "take_RP(X)" ,"op_robot" ) 
						 robot_sent=1  
						}
						if(  distance>DLIMIT && incinerator=="on" && (robot=="waiting_home" || robot=="job_done") && robot_sent==0 && ash_available==1  
						 ){forward("take_ash", "take_ash(X)" ,"op_robot" ) 
						 robot_sent=1  
						}
						if(  ((robot=="job_done" && rp_number==0) || (robot=="job_done" && distance<=DLIMIT) || (robot=="job_done" && incinerator=="burning")) && robot_sent==0  
						 ){forward("go_home", "go_home(X)" ,"op_robot" ) 
						 robot_sent=1  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t141",targetState="handle_sonar",cond=whenDispatch("sonar_value"))
					transition(edgeName="t142",targetState="handle_rp_number",cond=whenDispatch("rp_number"))
					transition(edgeName="t143",targetState="handle_ash",cond=whenEvent("burn_end"))
					transition(edgeName="t144",targetState="handle_work",cond=whenDispatch("work"))
					transition(edgeName="t145",targetState="handle_map",cond=whenDispatch("map"))
				}	 
				state("handle_map") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("map(X)"), Term.createTerm("map(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var MAP = payloadArg(0)  
								updateResourceRep( "map:$MAP"  
								)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="activated", cond=doswitch() )
				}	 
				state("handle_work") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("work(X)"), Term.createTerm("work(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 robot=payloadArg(0)  
								CommUtils.outgreen("$name	ROBOT_STATE:	$robot")
								forward("map", "map(0)" ,"op_robot" ) 
						}
						 robot_sent=0  
						if(  robot=="waste_in_incinerator"  
						 ){ incinerator="burning"  
						forward("burn_start", "burn_start(0)" ,"incinerator" ) 
						forward("burn_start", "burn_start(0)" ,"monitoring_device" ) 
						}
						if(  robot=="ash_taken"  
						 ){ ash_available=0  
						forward("ash_taken", "ash_taken(0)" ,"incinerator" ) 
						}
						if(  robot=="taking_RP"  
						 ){forward("kg", "kg($RP_remove)" ,"waste_storage" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="activated", cond=doswitch() )
				}	 
				state("handle_ash") { //this:State
					action { //it:State
						 
									ash_available=1 
									incinerator="on" 
						CommUtils.outgreen("$name	BURNEND LETTO")
						forward("burn_end", "burn_end(0)" ,"monitoring_device" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="activated", cond=doswitch() )
				}	 
			}
		}
} 
