/* Generated by AN DISI Unibo */ 
package it.unibo.scale_device

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Scale_device ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 
				lateinit var process : Process
				lateinit var out : java.io.BufferedReader
				var Last="1" 
				var New="0"
				var end = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outyellow("$name	START")
						 
									process = Runtime.getRuntime().exec("python scale.py")
									println("Python process started: $process")
									out = process.getInputStream().bufferedReader()
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("readOut") { //this:State
					action { //it:State
						 
									var New =  out.readLine()
									end = end + 1
										
						if(  Last != New  
						 ){ Last = New  
						if(  end == 5  
						 ){ process.destroyForcibly()  
						}
						emitLocalStreamEvent("scale_data", "scale_data($New)" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="readOut", cond=doswitch() )
				}	 
			}
		}
} 
