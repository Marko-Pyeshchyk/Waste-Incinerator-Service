/* Generated by AN DISI Unibo */ 
package it.unibo.test_observer

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Test_observer ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
				var Level=999
				var Status="off"
				var Burn=0
				var A=0
				var B=0
				var C=0
				var D=0
				var Flag=0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(500) 
						observeResource("localhost","8080","ctxwis","monitoring_device","level")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="ready", cond=doswitch() )
				}	 
				state("ready") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t035",targetState="handle_test",cond=whenRequest("test_data"))
					transition(edgeName="t036",targetState="update_led",cond=whenDispatch("state"))
					transition(edgeName="t037",targetState="update_sonar",cond=whenDispatch("level"))
					transition(edgeName="t038",targetState="update_burn",cond=whenDispatch("burn"))
				}	 
				state("handle_test") { //this:State
					action { //it:State
						 Flag=1  
						if(  Burn==1 && Status=="on" && A==0  
						 ){ A++  
						}
						if(  Burn==0 && Status=="off" && Level>300 && Level!=1000 && B==0  
						 ){ B++  
						}
						if(  Burn==0 && Status=="flashing" && Level<=300 && C==0  
						 ){ C++  
						}
						else
						 {if(  Burn==0 && Status=="flashing" && Level==1000 && D==0  
						  ){ D++  
						 }
						 }
						CommUtils.outcyan("A:	$A	B:	$B	C:	$C	D:	$D	STATUS:	$Status	LEVEL:	$Level	BURN:	$Burn	FLAG:	$Flag")
						if(  A==B && B==C && C==D && A==1  
						 ){answer("test_data", "test_data", "test_data(done)"   )  
						 System.exit(0)  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t039",targetState="update_led",cond=whenDispatch("state"))
					transition(edgeName="t040",targetState="update_sonar",cond=whenDispatch("level"))
					transition(edgeName="t041",targetState="update_burn",cond=whenDispatch("burn"))
				}	 
				state("update_led") { //this:State
					action { //it:State
						CommUtils.outcyan("cacca $Flag")
						if( checkMsgContent( Term.createTerm("state(X)"), Term.createTerm("state(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Status=payloadArg(0)  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="ready", cond=doswitchGuarded({ Flag==0  
					}) )
					transition( edgeName="goto",targetState="handle_test", cond=doswitchGuarded({! ( Flag==0  
					) }) )
				}	 
				state("update_sonar") { //this:State
					action { //it:State
						CommUtils.outcyan("pupu $Flag")
						if( checkMsgContent( Term.createTerm("level(X)"), Term.createTerm("level(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Level=payloadArg(0).toInt()  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="ready", cond=doswitchGuarded({ Flag==0  
					}) )
					transition( edgeName="goto",targetState="handle_test", cond=doswitchGuarded({! ( Flag==0  
					) }) )
				}	 
				state("update_burn") { //this:State
					action { //it:State
						CommUtils.outcyan("pipi $Flag")
						if( checkMsgContent( Term.createTerm("burn(X)"), Term.createTerm("burn(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Burn=payloadArg(0).toInt()  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="ready", cond=doswitchGuarded({ Flag==0  
					}) )
					transition( edgeName="goto",targetState="handle_test", cond=doswitchGuarded({! ( Flag==0  
					) }) )
				}	 
			}
		}
} 
