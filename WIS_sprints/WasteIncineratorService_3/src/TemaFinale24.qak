System wis24

Event burn_end : burn_end(N)

// incinerator
Dispatch activation_command:activation_command(N)
Dispatch burn_start:burn_start(N)
Dispatch ash_taken:ash_taken(N)

// waste storage
Dispatch weight:weight(N)
Event scale_data:scale_data(N)

// monitornig device
Dispatch burn_end:burn_end(X)

Dispatch sonar_value:sonar_value(K)

Dispatch led_on:led_on(N)
Dispatch led_off:led_off(N)
Dispatch led_flashing:led_flashing(N)

Event sonardata:sonardata(K)


Context ctxwis  ip [host="localhost" port=8080] 

// waste storage
QActor waste_storage  context ctxwis {    
	State s0 initial {
		println("$name	START") color yellow
		delay 1000 
		subscribeTo scale_device for scale_data
	}
	Transition t1 whenEvent scale_data -> handle_data
	
	State handle_data{
		onMsg( scale_data : scale_data(W) ){
			[# var W = payloadArg(0) #]
			println("$name	sending weight: $W") color yellow
			forward wis_mock -m weight:weight($W)
		}
	}
	Transition t1 whenEvent scale_data -> handle_data
}

QActor scale_device  context ctxwis {    
	[# 
		var Last=0 
		var New=50 
		#
	]
	
	State s0 initial {
		println("$name	START") color yellow
	} Goto work
	
	State work {
		delay 3000
		if [# Last != New #] {
			[# Last = New #] 
			emitlocalstream scale_data : scale_data($New) 
		}
	} Goto work
}

// incinerator
QActor incinerator  context ctxwis {    
	[# var BTIME = 2000L #]
	State s0 initial {
		println("$name	START") color red
	} 
	Transition t1 whenMsg activation_command -> activated
		
	State activated {
		forward wis_mock -m activation_command:activation_command(N)
	}
	Goto ready
	
	State ready {
		println("$name	READY") color red
	}
	Transition t1 whenMsg burn_start -> burning
	
	State burning {
		println("$name	burning") color red
		delayVar BTIME
		emit burn_end:burn_end(0) 
	}
	Transition t1 whenMsg ash_taken -> ready
	
}

QActor wis_mock context ctxwis {
	State s0 initial {
		println("$name		START") color green
		subscribeTo incinerator for burn_end
		delay 1000
		forward monitoring_device -m burn_end:burn_end(X)
		delay 1000
		forward monitoring_device -m burn_start:burn_start(X)
	} 
	Transition t1 whenMsg activation_command -> ready
		
	State ready {
		println("$name		READY to guide the robot") color green
		// fare il movimento del robot
		forward incinerator -m burn_start:burn_start(N)
	}
	Transition t1 whenEvent burn_end -> retrieve_ash
	
	State retrieve_ash {
		println("$name		robot will retrieve ash") color green
		forward incinerator -m ash_taken:ash_taken(N)
	}
}

QActor activator_mock context ctxwis {
	State s0 initial {
		delay 1000
		forward incinerator -m activation_command:activation_command(N)
	}
}

// monitornig device

QActor monitoring_device context ctxwis{
	[#	val DLIMIT = 300;
		var max_dist = 0
		var Distance = 999;
		var burning = 0;
		#]
	State s0 initial{
		println("START MonitoringDevice") color red
	}
	Transition t0 whenMsg sonar_value -> handleSonar
				  whenMsg burn_start -> handleStart
				  whenMsg burn_end -> handleEnd
	
	State handleStart {
		[# burning = 1 #]
		if [# Distance>DLIMIT && Distance!=max_dist #] {
			forward led -m led_on:led_on(N)
		}
	}
	Transition t0 whenMsg sonar_value -> handleSonar
				  whenMsg burn_start -> handleStart
				  whenMsg burn_end -> handleEnd
				  
	State handleEnd {
		[# burning = 0 #]
		if [# Distance>DLIMIT && Distance!=max_dist #] {
			forward led -m led_off:led_off(N)
		}
	}
	Transition t0 whenMsg sonar_value -> handleSonar
				  whenMsg burn_start -> handleStart
				  whenMsg burn_end -> handleEnd
				  
	State handleSonar{
		onMsg(sonar_value:sonar_value(K)){
			[# Distance = payloadArg(0).toInt() #]
			println("DISTANCE: $Distance") color red
			forward wis_mock -m sonar_value:sonar_value($Distance)
			if [# max_dist<Distance #] {
				[# max_dist=Distance #]
			}
			if [# Distance<=DLIMIT #] {
				forward led -m led_flashing:led_flashing(N)
			} else {
				if [# max_dist==Distance #] {
					forward led -m led_flashing:led_flashing(N)
				} else {
					if [# burning==1 #] {
						forward led -m led_on:led_on(N)                             
					} else {
						forward led -m led_off:led_off(N)
					}
				}
			}
		}
	}
	Transition t0 whenMsg sonar_value -> handleSonar
				  whenMsg burn_start -> handleStart
				  whenMsg burn_end -> handleEnd
}

QActor led context ctxwis{
	State s0 initial{
		println("START led") color magenta
	}
	Transition t0 whenMsg led_on -> handleOn
				  whenMsg led_off -> handleOff
				  whenMsg led_flashing -> handleFlashing
				  
	State handleOn{
		println("LED ON") color magenta
		//turn on with python
	}
	Transition t0 whenMsg led_on -> handleOn
				  whenMsg led_off -> handleOff
				  whenMsg led_flashing -> handleFlashing
	
	State handleOff{
		println("LED OFF") color magenta
		//turn off with python
	}
	Transition t0 whenMsg led_on -> handleOn
				  whenMsg led_off -> handleOff
				  whenMsg led_flashing -> handleFlashing
				  
				  
	State handleFlashing{
		println("LED FLASHING") color magenta
		//turn flashing with python
	}
	Transition t0 whenMsg led_on -> handleOn
				  whenMsg led_off -> handleOff
				  whenMsg led_flashing -> handleFlashing
}

QActor sonar context ctxwis{
	State s0 initial{
		println("START sonar") color green
		delay 1000
		subscribeTo sonar_device for sonardata
	}
	Transition t0 whenEvent sonardata -> handleSonar
	
	State handleSonar{
		onMsg(sonardata:sonardata(K)){
			[# var D = payloadArg(0) #]
			forward monitoring_device -m sonar_value:sonar_value($D)
		}
	}
	Transition t0 whenEvent sonardata -> handleSonar
}

QActor sonar_device context ctxwis{
	State s0 initial{
		println("START sonar_device") color yellow
		[# var K= 1000 #]
		delay 1500
		emitlocalstream sonardata:sonardata($K)
		delay 3000
		[# K= 1 #]
		emitlocalstream sonardata:sonardata($K)
	}
}