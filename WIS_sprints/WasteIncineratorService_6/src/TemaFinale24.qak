System wis24

Event burn_end : burn_end(N)

// incinerator
Dispatch activation_command:activation_command(N)
Dispatch burn_start:burn_start(N)
Dispatch ash_taken:ash_taken(N)

// waste storage
Dispatch rp_number:rp_number(N)
Dispatch kg:kg(N)

// monitornig device
Dispatch burn_end:burn_end(X)
Dispatch sonar_value:sonar_value(K)
Dispatch sonar_value:sonar_value(X,Y)

// op robot
Request engage        : engage(OWNER, STEPTIME)	
Reply   engagedone    : engagedone(ARG)    for engage
Reply   engagerefused : engagerefused(ARG) for engage
Dispatch disengage    : disengage(ARG)
Request getenvmap     : getenvmap(X)
Reply   envmap        : envmap(MAP)  for getenvmap

Dispatch cmd    : cmd( MOVE )  "MOVE = a|d|l|r|h   "

Request  cmd    : cmd(MOVE,T)  "MOVE = w|s|p (stepSynch)" 

Reply cmddone   : cmddone(R)          for cmd
Reply cmdfailed : cmdfailed(T,CAUSE)  for cmd

Request step       : step(TIME)	
Reply stepdone     : stepdone(V)                 for step
Reply stepfailed   : stepfailed(DURATION, CAUSE) for step

Request moverobot    :  moverobot(TARGETX, TARGETY)
Reply moverobotdone  :  moverobotok(ARG)                    for moverobot
Reply moverobotfailed:  moverobotfailed(PLANDONE, PLANTODO) for moverobot 

Dispatch take_RP : take_RP(X)
Dispatch take_ash : take_RP(X)
Dispatch go_home : take_RP(X)
Dispatch work : work(X)
Dispatch map:map(X)

Dispatch primo : primo(X)
Dispatch secondo : secondo(X)
Dispatch terzo : terzo(X)
Dispatch quarto : quarto(X)
Dispatch quinto : quinto(X)

//testing
Request test_data:test_data(X)
Reply test_data:test_data(X) for test_data

// context
Context ctxwis  ip [host="localhost" port=8080] 
Context ctxbrobot ip [host="127.0.0.1" port=8020] 
Context ctxmd ip [host="192.168.1.60" port=8080] 

ExternalQActor basicrobot context ctxbrobot 
ExternalQActor monitoring_device context ctxmd 

QActor op_robot  context ctxwis {
	[# 
		var X = 0
		var Y = 0
		#
	]    
	State s0 initial {
		println("$name	START") color cyan
		delay 500
		subscribeTo incinerator for burn_end
		request basicrobot -m engage : engage($MyName,135)
	}
	Transition t0 whenReply engagedone -> ready
				  whenReply engagerefused -> end
	
	State end {
		println("$name ENDS ") color cyan
	}
	
	State ready {
		println("$name	READY") color cyan
		forward wis -m work:work(waiting_home)
		forward basicrobot -m cmd:cmd(a)
		forward basicrobot -m cmd:cmd(d)
	}
	Transition t1 whenMsg take_RP -> menage_RP
				  whenMsg go_home -> going_HOME
				  whenMsg take_ash -> menage_ash
				  whenInterrupt map -> handle_map
	
	State handle_map{
		//printCurrentMessage color cyan
		request basicrobot -m getenvmap:getenvmap(0)
	}
	Transition t0 whenReply envmap -> handle_envmap
	
	State handle_envmap{
		//printCurrentMessage color cyan
		onMsg( envmap:envmap(X) ){
			[# var MAP = "'"+payloadArg(0)+"'" #]
			forward wis -m map:map($MAP)
		}
		returnFromInterrupt
	}
	
	
	State menage_RP {
		[#
			X = 0
			Y = 4
		#]
		forward wis -m work:work(moving_to_WASTEIN)
		request basicrobot -m  moverobot : moverobot(0,4)
	}
	Transition t0 //whenTime 5000 -> menage_RP
				  whenReply moverobotdone -> menage_RP2
				  whenReply moverobotfailed -> handle_obstacle
				  whenInterrupt map -> handle_map
	
	State menage_RP2 {
		[#
			X = 3
			Y = 1
		#]
		forward wis -m work:work(taking_RP)
		delay 3000
		forward wis -m work:work(moving_to_BURNIN)
		request basicrobot -m  moverobot : moverobot(3,2)
	}
	Transition t0 whenReply moverobotdone -> menage_RP3
				  whenReply moverobotfailed -> handle_obstacle
				  whenInterrupt map -> handle_map
		
	State menage_RP3 {
		forward wis -m work:work(putting_RP)
		delay 3000
		forward wis -m work:work(waste_in_incinerator)
	}
	Goto going_HOME
	
	State menage_ash {
		[#
			X = 5
			Y = 3
		#]
		forward wis -m work:work(moving_to_BURNOUT)
		request basicrobot -m  moverobot : moverobot(4,3)
	}
	Transition t0 whenReply moverobotdone -> menage_ash2
				  whenReply moverobotfailed -> handle_obstacle
				  whenInterrupt map -> handle_map
	
	State menage_ash2 {
		[#
			X = 6
			Y = 4
		#]
		forward wis -m work:work(taking_ash)
		delay 3000
		forward wis -m work:work(ash_taken)
		forward wis -m work:work(moving_to_ASHOUT)
		request basicrobot -m  moverobot : moverobot(6,4)
	}
	Transition t0 whenReply moverobotdone -> menage_ash3
				  whenReply moverobotfailed -> handle_obstacle
				  whenInterrupt map -> handle_map
		
	State menage_ash3 {
		forward wis -m work:work(dumping_ash)
		delay 3000
		forward wis -m work:work(job_done)
	}
	Goto job_done
	
	State job_done {
			//println("$name	JOB DONE") color cyan
	}
	Transition t1 whenMsg take_RP -> menage_RP
				  whenMsg go_home -> going_HOME
				  whenInterrupt map -> handle_map
	
	State going_HOME {
		[#
			X = 0
			Y = 0
		#]
		//println("$name	GOING HOME") color cyan
		forward wis -m work:work(going_home)
		request basicrobot -m  moverobot : moverobot(0,0)
		
		 //forward basicrobot -m disengage : disengage($MyName)
		 //[# System.exit(0) #]
	}
	Transition t0 whenReply moverobotdone -> ready
				  whenReply moverobotfailed -> handle_obstacle
				  whenInterrupt map -> handle_map
	
 
	State handle_obstacle {
		println("$name	OBSTACLE hit") color cyan
		delay 3000
		if [# X==0 && Y==4 #] {
			autodispatch primo:primo(a)
		}else{
			if [# X==3 && Y==1 #] {
				autodispatch secondo:secondo(a)
			}else{
				if [# X==5 && Y==3 #] {
					autodispatch terzo:terzo(a)
				}else{
					if [# X==6 && Y==4 #] {
						autodispatch quarto:quarto(a)
					}else{
						if [# X==0 && Y==0 #] {
							autodispatch quinto:quinto(a)
						}
					}
				}
			}
		}
		
	}
	Transition t0 whenMsg primo -> menage_RP
				  whenMsg secondo -> menage_RP2
				  whenMsg terzo -> menage_ash
				  whenMsg quarto -> menage_ash2
				  whenMsg quinto -> going_HOME
				  whenInterrupt map -> handle_map
}
 
 
// waste storage
QActor waste_storage  context ctxwis {   
	[# var RP:Int = 0 #]
	 
	State s0 initial {
		println("$name	START") color yellow
	}
	Transition t1 whenMsg kg -> convert_kg
	
	State convert_kg{
		delay 5000
		onMsg( kg : kg(N) ){
			[# 
				var KG = payloadArg(0).toFloat()
				RP += kotlin.math.round(KG/50).toInt()
			#]
			println("$name	$KG Kg ===> $RP RP") color yellow
			updateResource [ # "rp_number($RP)" #]
			forward wis -m rp_number:rp_number($RP)
		}
	}
	Transition t1 whenMsg kg -> convert_kg
}

// incinerator
QActor incinerator  context ctxwis {    
	[# var BTIME = 3000L #]
	State s0 initial {
		println("$name	START") color red
	} 
	Transition t1 whenMsg activation_command -> activated
		
	State activated {
		forward wis -m activation_command:activation_command(N)
	}
	Goto ready
	
	State ready {
		println("$name	READY") color red
	}
	Transition t1 whenMsg burn_start -> burning
	
	State burning {
		println("$name	burning...") color red
		delayVar BTIME
		println("$name	burn end") color red
		emit burn_end:burn_end(0) 
	}
	Transition t1 whenMsg ash_taken -> ready
	
}

QActor wis context ctxwis {
	[#
		var distance=999
		var rp_number=0
		var robot=""
		var incinerator="off"
		var robot_sent=0
		var ash_available=0
		var DLIMIT=15
		var RP_remove = -50
	#]
	State s0 initial {
		println("$name		START") color green
		delay 500
		subscribeTo incinerator for burn_end
	}
	Goto ready
	
	State ready {
		println("$name		READY") color green
		updateResource[# "$name	INFO:	numero RP: $rp_number	distance: $distance	incinerator: $incinerator	robot: $robot	ash: $ash_available" #]
	}	
	Transition t1 whenMsg activation_command -> handle_activation
				  whenMsg sonar_value -> handle_sonar
				  whenMsg rp_number -> handle_rp_number
				  whenMsg work -> handle_robot_init
				  whenMsg map -> handle_map
				  
	State handle_sonar{
		onMsg(sonar_value:sonar_value(K)){
			[# distance=payloadArg(0).toInt() 
				var DDD=distance
				#
			]
			forward test_observer -m sonar_value:sonar_value($DDD)
			//updateResource [# "sonar_value($distance)" #]
		}
	}
	Goto ready if [# incinerator=="off" #] else activated
	
	State handle_rp_number{
		onMsg(rp_number:rp_number(K)){
			[# rp_number=payloadArg(0).toInt() #]
		}
	}
	Goto ready if [# incinerator=="off" #] else activated
	
	State handle_robot_init{
		onMsg(work:work(K)){
			[# robot=payloadArg(0) #]
		}
	}
	Goto ready if [# incinerator=="off" #] else activated
	
	State handle_activation{
		[# incinerator="on" #]
	}
	Goto activated
	
	State activated {
		updateResource[# "data($name	INFO:	numero RP: $rp_number	distance: $distance	incinerator: $incinerator	robot: $robot	ash: $ash_available)" #]
		//println("$name		ACTIVE") color green
		//println("$name	INFO:	rp_number: $rp_number	distance: $distance	incinerator: $incinerator		robot: $robot	ash: $ash_available") color green
		if [# rp_number>0 && distance>DLIMIT && incinerator!="burning" && (robot=="waiting_home" || robot=="job_done") && robot_sent==0 && ash_available==0 #] {
			forward op_robot -m take_RP:take_RP(X)
			[# robot_sent=1 #]
		}
		if [# distance>DLIMIT && incinerator=="on" && (robot=="waiting_home" || robot=="job_done") && robot_sent==0 && ash_available==1 #] {
			forward op_robot -m take_ash:take_ash(X)
			[# robot_sent=1 #]
		}
		if [# ((robot=="job_done" && rp_number==0) || (robot=="job_done" && distance<=DLIMIT) || (robot=="job_done" && incinerator=="burning")) && robot_sent==0 #] {
			forward op_robot -m go_home:go_home(X)
			[# robot_sent=1 #]
		}
	}
	Transition t1// whenTime 5000 -> activated//scoprire come funzia
				  whenMsg sonar_value -> handle_sonar
				  whenMsg rp_number -> handle_rp_number
				  whenEvent burn_end -> handle_ash
				  whenMsg work -> handle_work
				  whenMsg map -> handle_map
				  
	State handle_map{
		onMsg(map:map(X)){
			[# var MAP = payloadArg(0) #]
			//println("MAP:	$MAP") color cyan
			updateResource [# "map:$MAP" #]
		}
	}
	Goto activated
				  
	State handle_work{
		onMsg(work:work(X)){
			[# robot=payloadArg(0) #]
			println("$name	ROBOT_STATE:	$robot") color green
			forward op_robot -m map:map(0)
		}
		[# robot_sent=0 #]
		if [# robot=="waste_in_incinerator" #]{
			[# incinerator="burning" #]
			forward incinerator -m burn_start:burn_start(0)
			forward monitoring_device -m burn_start:burn_start(0)
		}
		if [# robot=="ash_taken" #]{
			[# ash_available=0 #]
			forward incinerator -m ash_taken:ash_taken(0)
		}
		if [# robot=="taking_RP" #]{
			forward waste_storage -m kg:kg($RP_remove)
		}
	}
	Goto activated
				  
	State handle_ash{
		[# 
			ash_available=1 
			incinerator="on" 
		#]
		println("$name	BURNEND LETTO") color green
		forward monitoring_device -m burn_end:burn_end(0)
	}
	Goto activated
}

// external agents
QActor activator_mock context ctxwis {
	State s0 initial {
		delay 1000
		forward incinerator -m activation_command:activation_command(N)
	}
}

/*QActor external_agent_ws context ctxwis {
	State s0 initial {
		delay 2000
		forward waste_storage -m kg:kg(102)
		forward waste_storage -m kg:kg(51)
	}
}*/

QActor test_observer context ctxwis{
	[# 
		var Level=9999
		var New=9999
		var Times=0
		var FLAG=-1
		var Number=0
	#]
	State s0 initial{
		delay 500
		//observeResource waste_storage msgid rp_number
		println("$name	START") color cyan
	}
	Transition t0 whenRequest test_data -> send_rp
				
	
	State send_rp{
		onMsg(test_data:test_data(X)){
			[# 
				var KG=payloadArg(0).toDouble() 
				Number=kotlin.math.round(KG/50).toInt()
			#]
			forward waste_storage -m kg:kg($KG)
		}
	}
	Transition t0 whenMsg sonar_value -> handle_sonar
	
	State handle_sonar{
		printCurrentMessage color cyan
		onMsg(sonar_value:sonar_value(X)) {
			[# var New=payloadArg(0).toInt() #]
			println("NEW:	$New	LEVEL:	$Level") color magenta
			if [# Level-New<5 && Level-New>-5 #]
			{
				[# 
					Level=New 
					Times++
				#]
				if [# Times==5 #]{
					[# 
						FLAG++ 
					#]
				}
			} else {
				[# 
					Times=0 
					Level=New
				#]
			}
			println("Flag: $FLAG		Times: $Times	NUMBER:	$Number") color cyan
			if [# FLAG==Number #]{
				replyTo test_data with test_data:test_data(ok)
				[# System.exit(0) #]
			} else {
				if [# FLAG>Number #]{
					replyTo test_data with test_data:test_data(fail)
					[# System.exit(0) #]
				}
			}
		}
	}
	Transition t0 whenMsg sonar_value -> handle_sonar
}

/*Facade serviceStatusFacade port 8085 usingactor wis inctx ctxwis
appl "main.java.ServiceStatusGUI.ServiceStatusGuiApplication" //"main.java.ServiceStatusGUI.ServiceStatusGUIApplication"
UserLibs /*-f "robotfacade24-1.0-plain" -f "robotfacade24-1.0" -f "ServiceStatusGUI-0.0.1-SNAPSHOT" //-f "ServiceStatusGUI" */
