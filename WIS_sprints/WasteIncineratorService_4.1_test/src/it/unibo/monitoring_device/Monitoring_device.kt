/* Generated by AN DISI Unibo */ 
package it.unibo.monitoring_device

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Monitoring_device ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
			val DLIMIT = 300;
				var max_dist = 0
				var Distance = 999;
				var burning = 0;
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outred("START MonitoringDevice")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t031",targetState="handleSonar",cond=whenDispatch("sonar_value"))
					transition(edgeName="t032",targetState="handleStart",cond=whenDispatch("burn_start"))
					transition(edgeName="t033",targetState="handleEnd",cond=whenDispatch("burn_end"))
				}	 
				state("handleStart") { //this:State
					action { //it:State
						 burning = 1  
						if(  Distance>DLIMIT && Distance!=max_dist  
						 ){forward("led_on", "led_on(N)" ,"led" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t034",targetState="handleSonar",cond=whenDispatch("sonar_value"))
					transition(edgeName="t035",targetState="handleStart",cond=whenDispatch("burn_start"))
					transition(edgeName="t036",targetState="handleEnd",cond=whenDispatch("burn_end"))
				}	 
				state("handleEnd") { //this:State
					action { //it:State
						 burning = 0  
						if(  Distance>DLIMIT && Distance!=max_dist  
						 ){forward("led_off", "led_off(N)" ,"led" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t037",targetState="handleSonar",cond=whenDispatch("sonar_value"))
					transition(edgeName="t038",targetState="handleStart",cond=whenDispatch("burn_start"))
					transition(edgeName="t039",targetState="handleEnd",cond=whenDispatch("burn_end"))
				}	 
				state("handleSonar") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("sonar_value(K)"), Term.createTerm("sonar_value(K)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Distance = payloadArg(0).toInt()  
								CommUtils.outred("DISTANCE: $Distance")
								forward("sonar_value", "sonar_value($Distance)" ,"wis_mock" ) 
								if(  max_dist<Distance  
								 ){ max_dist=Distance  
								}
								if(  Distance<=DLIMIT  
								 ){forward("led_flashing", "led_flashing(N)" ,"led" ) 
								}
								else
								 {if(  max_dist==Distance  
								  ){forward("led_flashing", "led_flashing(N)" ,"led" ) 
								 }
								 else
								  {if(  burning==1  
								   ){forward("led_on", "led_on(N)" ,"led" ) 
								  }
								  else
								   {forward("led_off", "led_off(N)" ,"led" ) 
								   }
								  }
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t040",targetState="handleSonar",cond=whenDispatch("sonar_value"))
					transition(edgeName="t041",targetState="handleStart",cond=whenDispatch("burn_start"))
					transition(edgeName="t042",targetState="handleEnd",cond=whenDispatch("burn_end"))
				}	 
			}
		}
} 
