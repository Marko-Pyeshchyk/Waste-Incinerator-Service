/* Generated by AN DISI Unibo */ 
package it.unibo.test_observer_send

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Test_observer_send ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 var A : String = "aaa" 
				val T = 1500L
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(1000) 
						observeResource("localhost","8080","ctxwis","wis_mock","rp_number")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t011",targetState="notify",cond=whenRequest("test_reqest"))
				}	 
				state("notify") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						forward("kg", "kg(47)" ,"external_agent_ws" ) 
						CommUtils.outcyan("$A aaaaaaaaaa")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t012",targetState="send_data",cond=whenDispatch("rp_number"))
				}	 
				state("send_data") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("rp_number(N)"), Term.createTerm("rp_number(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 A = payloadArg(0)  
								answer("test_reqest", "test_reply", "test_reply($A)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_send_data", 
				 	 					  scope, context!!, "local_tout_"+name+"_send_data", 1500.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t113",targetState="end",cond=whenTimeout("local_tout_"+name+"_send_data"))   
					transition(edgeName="t114",targetState="notify",cond=whenRequest("test_reqest"))
				}	 
				state("end") { //this:State
					action { //it:State
						CommUtils.outred("ending.......")
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
