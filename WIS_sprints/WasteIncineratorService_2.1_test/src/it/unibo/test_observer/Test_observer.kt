/* Generated by AN DISI Unibo */ 
package it.unibo.test_observer

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Test_observer ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 var A : String = "aaa" 
				var N = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(1000) 
						observeResource("localhost","8080","ctxwis","wis_mock","rp_number")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t015",targetState="notify1",cond=whenRequest("test_request"))
				}	 
				state("notify1") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("test_request(N)"), Term.createTerm("test_request(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 A = payloadArg(0)  
						}
						forward("kg", "kg($A)" ,"external_agent_ws" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t016",targetState="send_data1",cond=whenDispatch("rp_number"))
				}	 
				state("send_data1") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("rp_number(N)"), Term.createTerm("rp_number(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 A = payloadArg(0)  
								answer("test_request", "test_reply", "test_reply($A)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t017",targetState="notify2",cond=whenRequest("test_request"))
				}	 
				state("notify2") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("test_request(N)"), Term.createTerm("test_request(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 A = payloadArg(0)  
						}
						forward("kg", "kg($A)" ,"external_agent_ws" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t018",targetState="send_data2",cond=whenDispatch("rp_number"))
				}	 
				state("send_data2") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("rp_number(N)"), Term.createTerm("rp_number(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 A = payloadArg(0)  
								answer("test_request", "test_reply", "test_reply($A)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="end", cond=doswitch() )
				}	 
				state("end") { //this:State
					action { //it:State
						CommUtils.outred("ending.......")
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
