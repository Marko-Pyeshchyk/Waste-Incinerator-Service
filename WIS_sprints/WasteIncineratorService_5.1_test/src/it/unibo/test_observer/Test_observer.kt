/* Generated by AN DISI Unibo */ 
package it.unibo.test_observer

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Test_observer ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 
				var A : String = "" 
				var Comulative : String = "" 
				var Test : String = ""
				var Jobs : Int = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(5000) 
						observeResource("localhost","8080","ctxwis","wis","work")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t063",targetState="handle_request",cond=whenRequest("test_request"))
				}	 
				state("handle_request") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("test_request(N)"), Term.createTerm("test_request(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Test = payloadArg(0)  
						}
						CommUtils.outblack("$Test")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="test1", cond=doswitchGuarded({ Test == "1"  
					}) )
					transition( edgeName="goto",targetState="test2", cond=doswitchGuarded({! ( Test == "1"  
					) }) )
				}	 
				state("test1") { //this:State
					action { //it:State
						CommUtils.outcyan("$name	test 1")
						forward("kg", "kg(50)" ,"external_agent_ws" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t064",targetState="send_data",cond=whenDispatch("work"))
				}	 
				state("test2") { //this:State
					action { //it:State
						CommUtils.outcyan("$name	test 2")
						forward("kg", "kg(100)" ,"external_agent_ws" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t065",targetState="send_data",cond=whenDispatch("work"))
				}	 
				state("send_data") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("work(X)"), Term.createTerm("work(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												A = payloadArg(0) 
												Comulative +=  A + ","
								if(  A=="job_done" && Test=="1" 
								 ){ Comulative = "'"+ Comulative + "'"  
								CommUtils.outred("ending.......")
								answer("test_request", "test_reply", "test_reply($Comulative)"   )  
								 System.exit(0)  
								}
								if(  A=="job_done" && Test=="2" 
								 ){ Jobs = Jobs+1  
								if(  Jobs == 2  
								 ){ Comulative = "'"+ Comulative + "'"  
								answer("test_request", "test_reply", "test_reply($Comulative)"   )  
								 System.exit(0)  
								}
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t066",targetState="send_data",cond=whenDispatch("work"))
				}	 
			}
		}
} 
