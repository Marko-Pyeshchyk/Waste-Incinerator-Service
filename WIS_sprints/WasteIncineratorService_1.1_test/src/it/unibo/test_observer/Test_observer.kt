/* Generated by AN DISI Unibo */ 
package it.unibo.test_observer

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Test_observer ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 
				var Status="" 
			    var Last="on"
			    var Value=0
			    var Cycles=0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(1000) 
						observeResource("localhost","8080","ctxwis","wis_mock","event_sent")
						observeResource("localhost","8080","ctxwis","incinerator","state")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="handle_data",cond=whenRequest("test_data"))
					transition(edgeName="t06",targetState="handle_burn",cond=whenRequest("burnRP"))
					transition(edgeName="t07",targetState="handle_extra",cond=whenRequest("extraRP"))
					interrupthandle(edgeName="t08",targetState="update_status",cond=whenDispatch("state"),interruptedStateTransitions)
				}	 
				state("handle_extra") { //this:State
					action { //it:State
						delay(7000) 
						forward("burn_start", "burn_start(0)" ,"incinerator" ) 
						forward("burn_start", "burn_start(0)" ,"incinerator" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t09",targetState="handle_multiple",cond=whenDispatch("state"))
				}	 
				state("handle_multiple") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("state(X)"), Term.createTerm("state(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Status= payloadArg(0)  
								CommUtils.outcyan("STATUS:	$Status	LAST:	$Last	VALUE:	$Value	CYCLES:	$Cycles")
								if(  Status=="burning" && Last=="on" 
								 ){
													Value++
								}
								else
								 {if(  Status=="on" && Last=="ended" 
								  ){
								 					Cycles++
								 }
								 else
								  {if(  Status=="ended" && Last=="burning" 
								   ){if(  Cycles>0 && Cycles==(Value-1)  
								   ){answer("extraRP", "extraRP", "extraRP($Cycles)"   )  
								  System.exit(0) 
								  }
								  }
								  }
								 }
								Last=Status 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t010",targetState="handle_multiple",cond=whenDispatch("state"))
				}	 
				state("handle_burn") { //this:State
					action { //it:State
						forward("burn_start", "burn_start(0)" ,"incinerator" ) 
						delay(1000) 
						forward("answer_wait", "answer_wait(0)" ,name ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t011",targetState="handle_answer",cond=whenDispatch("answer_wait"))
					interrupthandle(edgeName="t012",targetState="update_status",cond=whenDispatch("state"),interruptedStateTransitions)
				}	 
				state("handle_answer") { //this:State
					action { //it:State
						CommUtils.outblack("STATUS:	$Status")
						answer("burnRP", "burnRP", "burnRP($Status)"   )  
						System.exit(0) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("handle_sent") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t013",targetState="handle_data",cond=whenDispatch("event_sent"))
				}	 
				state("handle_data") { //this:State
					action { //it:State
						answer("test_data", "send_data", "send_data(done)"   )  
						System.exit(0) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("update_status") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("state(X)"), Term.createTerm("state(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												Last=Status
												Status= payloadArg(0) 
						}
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
