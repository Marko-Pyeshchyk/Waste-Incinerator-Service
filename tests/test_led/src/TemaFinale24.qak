System wis24

Event burn_end : burn_end(N)

// incinerator
Dispatch activation_command:activation_command(N)
Dispatch burn_start:burn_start(N)
Dispatch ash_taken:ash_taken(N)

// waste storage
Dispatch weight:weight(N)
Event scale_data:scale_data(N)

// monitornig device
Dispatch burn_end:burn_end(X)

Dispatch sonar_value:sonar_value(K)

Dispatch led_on:led_on(N)
Dispatch led_off:led_off(N)
Dispatch led_flashing:led_flashing(N)

Event sonardata:sonardata(K)

// op robot
Request engage        : engage(OWNER, STEPTIME)	
Reply   engagedone    : engagedone(ARG)    for engage
Reply   engagerefused : engagerefused(ARG) for engage
Dispatch disengage    : disengage(ARG)

Dispatch cmd    : cmd( MOVE )  "MOVE = a|d|l|r|h   "

Request  cmd    : cmd(MOVE,T)  "MOVE = w|s|p (stepSynch)" 

Reply cmddone   : cmddone(R)          for cmd
Reply cmdfailed : cmdfailed(T,CAUSE)  for cmd

Request step       : step(TIME)	
Reply stepdone     : stepdone(V)                 for step
Reply stepfailed   : stepfailed(DURATION, CAUSE) for step

Request moverobot    :  moverobot(TARGETX, TARGETY)
Reply moverobotdone  :  moverobotok(ARG)                    for moverobot
Reply moverobotfailed:  moverobotfailed(PLANDONE, PLANTODO) for moverobot 

Dispatch take_RP : take_RP(X)
Dispatch take_ash : take_RP(X)
Dispatch go_home : take_RP(X)
Dispatch work : work(X)

Dispatch primo : primo(X)
Dispatch secondo : secondo(X)
Dispatch terzo : terzo(X)
Dispatch quarto : quarto(X)
Dispatch quinto : quinto(X)

// context
Context ctxwis  ip [host="localhost" port=8080] 

// monitornig device
/*
QActor monitoring_device context ctxwis{
	[#	val DLIMIT = 300;
		var max_dist = 0
		var Distance = 999;
		var burning = 0;
	#]
	State s0 initial{
		println("START MonitoringDevice") color red
	}
	Transition t0 whenMsg sonar_value -> handleSonar
				  whenMsg burn_start -> handleStart
				  whenMsg burn_end -> handleEnd
	
	State handleStart {
		[# burning = 1 #]
		if [# Distance>DLIMIT && Distance!=max_dist #] {
			forward led -m led_on:led_on(N)
		}
	}
	Transition t0 whenMsg sonar_value -> handleSonar
				  whenMsg burn_start -> handleStart
				  whenMsg burn_end -> handleEnd
				  
	State handleEnd {
		[# burning = 0 #]
		if [# Distance>DLIMIT && Distance!=max_dist #] {
			forward led -m led_off:led_off(N)
		}
	}
	Transition t0 whenMsg sonar_value -> handleSonar
				  whenMsg burn_start -> handleStart
				  whenMsg burn_end -> handleEnd
				  
	State handleSonar{
		onMsg(sonar_value:sonar_value(K)){
			[# Distance = payloadArg(0).toInt() #]
			println("$name			distance: $Distance") color red
			forward wis -m sonar_value:sonar_value($Distance)
			if [# max_dist<Distance #] {
				[# max_dist=Distance #]
			}
			if [# Distance<=DLIMIT #] {
				forward led -m led_flashing:led_flashing(N)
			} else {
				if [# max_dist==Distance #] {
					forward led -m led_flashing:led_flashing(N)
				} else {
					if [# burning==1 #] {
						forward led -m led_on:led_on(N)                             
					} else {
						forward led -m led_off:led_off(N)
					}
				}
			}
		}
	}
	Transition t0 whenMsg sonar_value -> handleSonar
				  whenMsg burn_start -> handleStart
				  whenMsg burn_end -> handleEnd
}
*/

QActor md context ctxwis{
	State s0 initial{
		println("START MonitoringDevice") color red
		
		delay 500 
		forward led -m led_flashing:led_flashing(N)
		delay 5000
		forward led -m led_off:led_off(N)
		delay 5000
		forward led -m led_on:led_on(N)  
		delay 5000
		forward led -m led_off:led_off(N)
		delay 5000
		forward led -m led_flashing:led_flashing(N)
		delay 5000 
		forward led -m led_off:led_off(N)
	}
}
QActor led context ctxwis{
	[# 
		lateinit var process : Process
		lateinit var out : java.io.BufferedReader
		var blink = false
	#]
	
	State s0 initial{
		println("START led") color magenta
	}
	Transition t0 whenMsg led_on -> handleOn
				  whenMsg led_off -> handleOff
				  whenMsg led_flashing -> handleFlashing
				  
	State handleOn{
		if [# blink == true #] {
			[#
				blink = false
				process.destroy()
			#]
		}
		
		println("LED ON") color magenta
		[# 
			process = Runtime.getRuntime().exec("python led_on.py")
		#]
	}
	Transition t0 whenMsg led_on -> handleOn
				  whenMsg led_off -> handleOff
				  whenMsg led_flashing -> handleFlashing
	
	State handleOff{
		if [# blink == true #] {
			[#
				blink = false
				process.destroy()
			#]
		}
		
		println("LED OFF") color magenta
		[# 
			process = Runtime.getRuntime().exec("python led_off.py")
		#]
	}
	Transition t0 whenMsg led_on -> handleOn
				  whenMsg led_off -> handleOff
				  whenMsg led_flashing -> handleFlashing
				  
				  
	State handleFlashing{
		println("LED FLASHING") color magenta
		if [# blink == false #] {
			[# 
				process = Runtime.getRuntime().exec("python led_blink.py")
				blink = true
			#]	
		}
	}
	Transition t0 whenMsg led_on -> handleOn
				  whenMsg led_off -> handleOff
				  whenMsg led_flashing -> handleFlashing
}
/* 
QActor sonar context ctxwis{
	State s0 initial{
		println("START sonar") color green
		delay 1000
		subscribeTo sonar_device for sonardata
	}
	Transition t0 whenEvent sonardata -> handleSonar
	
	State handleSonar{
		onMsg(sonardata:sonardata(K)){
			[# var D = payloadArg(0) #]
			forward monitoring_device -m sonar_value:sonar_value($D)
		}
	}
	Transition t0 whenEvent sonardata -> handleSonar
}

QActor sonar_device context ctxwis {
	[# 
		lateinit var process : Process
		lateinit var out : java.io.BufferedReader
		var Distance = 0
	#]
	
	State s0 initial {
		println("$name	START") color yellow
		[# 
			process = Runtime.getRuntime().exec("python sonar.py")
			out = process.getInputStream().bufferedReader()
		#]
	}
	Goto readOut
	
	State readOut {
		[# 
			var Distance =  out.readLine()	
		#]
		//println("$name	distance: $Distance") color yellow
		emitlocalstream sonardata:sonardata($Distance)
	}
	Goto readOut
}
*/